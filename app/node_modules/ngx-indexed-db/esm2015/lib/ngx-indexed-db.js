export function openDatabase(indexedDB, dbName, version, upgradeCallback) {
    return new Promise((resolve, reject) => {
        if (!indexedDB) {
            reject('IndexedDB not available');
        }
        const request = indexedDB.open(dbName, version);
        let db;
        request.onsuccess = (event) => {
            db = request.result;
            resolve(db);
        };
        request.onerror = (event) => {
            reject(`IndexedDB error: ${request.error}`);
        };
        if (typeof upgradeCallback === 'function') {
            request.onupgradeneeded = (event) => {
                upgradeCallback(event, db);
            };
        }
    });
}
export function CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {
    if (!indexedDB) {
        return;
    }
    const request = indexedDB.open(dbName, version);
    request.onupgradeneeded = (event) => {
        const database = event.target.result;
        storeSchemas.forEach((storeSchema) => {
            if (!database.objectStoreNames.contains(storeSchema.store)) {
                const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);
                storeSchema.storeSchema.forEach((schema) => {
                    objectStore.createIndex(schema.name, schema.keypath, schema.options);
                });
            }
        });
        const storeMigrations = migrationFactory && migrationFactory();
        if (storeMigrations) {
            Object.keys(storeMigrations)
                .map((k) => parseInt(k, 10))
                .filter((v) => v > event.oldVersion)
                .sort((a, b) => a - b)
                .forEach((v) => {
                storeMigrations[v](database, request.transaction);
            });
        }
        database.close();
    };
    request.onsuccess = (e) => {
        e.target.result.close();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluZGV4ZWQtZGIuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL2Fzc3VuY2FvY2hhcmxlcy9uZ3gtaW5kZXhlZC1kYi9wcm9qZWN0cy9uZ3gtaW5kZXhlZC1kYi9zcmMvIiwic291cmNlcyI6WyJsaWIvbmd4LWluZGV4ZWQtZGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxVQUFVLFlBQVksQ0FDMUIsU0FBcUIsRUFDckIsTUFBYyxFQUNkLE9BQWUsRUFDZixlQUFvRDtJQUVwRCxPQUFPLElBQUksT0FBTyxDQUFjLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUNuQztRQUNELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELElBQUksRUFBZSxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNuQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNwQixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUM7UUFDRixPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDakMsTUFBTSxDQUFDLG9CQUFvQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUM7UUFDRixJQUFJLE9BQU8sZUFBZSxLQUFLLFVBQVUsRUFBRTtZQUN6QyxPQUFPLENBQUMsZUFBZSxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7Z0JBQ3pDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDO1NBQ0g7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLFNBQXFCLEVBQ3JCLE1BQWMsRUFDZCxPQUFlLEVBQ2YsWUFBK0IsRUFDL0IsZ0JBQWtHO0lBRWxHLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxPQUFPO0tBQ1I7SUFDRCxNQUFNLE9BQU8sR0FBcUIsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFbEUsT0FBTyxDQUFDLGVBQWUsR0FBRyxDQUFDLEtBQTRCLEVBQUUsRUFBRTtRQUN6RCxNQUFNLFFBQVEsR0FBaUIsS0FBSyxDQUFDLE1BQWMsQ0FBQyxNQUFNLENBQUM7UUFFM0QsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQTRCLEVBQUUsRUFBRTtZQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzFELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDM0YsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUF5QixFQUFFLEVBQUU7b0JBQzVELFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdkUsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUMvRCxJQUFJLGVBQWUsRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztpQkFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNyQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDYixlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNwRCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUQsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTtRQUM3QixDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JqZWN0U3RvcmVNZXRhLCBPYmplY3RTdG9yZVNjaGVtYSB9IGZyb20gJy4vbmd4LWluZGV4ZWQtZGIubWV0YSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuRGF0YWJhc2UoXG4gIGluZGV4ZWREQjogSURCRmFjdG9yeSxcbiAgZGJOYW1lOiBzdHJpbmcsXG4gIHZlcnNpb246IG51bWJlcixcbiAgdXBncmFkZUNhbGxiYWNrPzogKGE6IEV2ZW50LCBiOiBJREJEYXRhYmFzZSkgPT4gdm9pZFxuKTogUHJvbWlzZTxJREJEYXRhYmFzZT4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8SURCRGF0YWJhc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoIWluZGV4ZWREQikge1xuICAgICAgcmVqZWN0KCdJbmRleGVkREIgbm90IGF2YWlsYWJsZScpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCB2ZXJzaW9uKTtcbiAgICBsZXQgZGI6IElEQkRhdGFiYXNlO1xuICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgZGIgPSByZXF1ZXN0LnJlc3VsdDtcbiAgICAgIHJlc29sdmUoZGIpO1xuICAgIH07XG4gICAgcmVxdWVzdC5vbmVycm9yID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgcmVqZWN0KGBJbmRleGVkREIgZXJyb3I6ICR7cmVxdWVzdC5lcnJvcn1gKTtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgdXBncmFkZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgdXBncmFkZUNhbGxiYWNrKGV2ZW50LCBkYik7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVPYmplY3RTdG9yZShcbiAgaW5kZXhlZERCOiBJREJGYWN0b3J5LFxuICBkYk5hbWU6IHN0cmluZyxcbiAgdmVyc2lvbjogbnVtYmVyLFxuICBzdG9yZVNjaGVtYXM6IE9iamVjdFN0b3JlTWV0YVtdLFxuICBtaWdyYXRpb25GYWN0b3J5PzogKCkgPT4geyBba2V5OiBudW1iZXJdOiAoZGI6IElEQkRhdGFiYXNlLCB0cmFuc2FjdGlvbjogSURCVHJhbnNhY3Rpb24pID0+IHZvaWQgfVxuKTogdm9pZCB7XG4gIGlmICghaW5kZXhlZERCKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlcXVlc3Q6IElEQk9wZW5EQlJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUsIHZlcnNpb24pO1xuXG4gIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2ZW50OiBJREJWZXJzaW9uQ2hhbmdlRXZlbnQpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZTogSURCRGF0YWJhc2UgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkucmVzdWx0O1xuXG4gICAgc3RvcmVTY2hlbWFzLmZvckVhY2goKHN0b3JlU2NoZW1hOiBPYmplY3RTdG9yZU1ldGEpID0+IHtcbiAgICAgIGlmICghZGF0YWJhc2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZVNjaGVtYS5zdG9yZSkpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0U3RvcmUgPSBkYXRhYmFzZS5jcmVhdGVPYmplY3RTdG9yZShzdG9yZVNjaGVtYS5zdG9yZSwgc3RvcmVTY2hlbWEuc3RvcmVDb25maWcpO1xuICAgICAgICBzdG9yZVNjaGVtYS5zdG9yZVNjaGVtYS5mb3JFYWNoKChzY2hlbWE6IE9iamVjdFN0b3JlU2NoZW1hKSA9PiB7XG4gICAgICAgICAgb2JqZWN0U3RvcmUuY3JlYXRlSW5kZXgoc2NoZW1hLm5hbWUsIHNjaGVtYS5rZXlwYXRoLCBzY2hlbWEub3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RvcmVNaWdyYXRpb25zID0gbWlncmF0aW9uRmFjdG9yeSAmJiBtaWdyYXRpb25GYWN0b3J5KCk7XG4gICAgaWYgKHN0b3JlTWlncmF0aW9ucykge1xuICAgICAgT2JqZWN0LmtleXMoc3RvcmVNaWdyYXRpb25zKVxuICAgICAgICAubWFwKChrKSA9PiBwYXJzZUludChrLCAxMCkpXG4gICAgICAgIC5maWx0ZXIoKHYpID0+IHYgPiBldmVudC5vbGRWZXJzaW9uKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYSAtIGIpXG4gICAgICAgIC5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgc3RvcmVNaWdyYXRpb25zW3ZdKGRhdGFiYXNlLCByZXF1ZXN0LnRyYW5zYWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGF0YWJhc2UuY2xvc2UoKTtcbiAgfTtcblxuICByZXF1ZXN0Lm9uc3VjY2VzcyA9IChlOiBhbnkpID0+IHtcbiAgICBlLnRhcmdldC5yZXN1bHQuY2xvc2UoKTtcbiAgfTtcbn1cbiJdfQ==