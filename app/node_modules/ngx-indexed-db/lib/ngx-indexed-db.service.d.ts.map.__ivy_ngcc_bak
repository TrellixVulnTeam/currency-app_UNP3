{"version":3,"file":"ngx-indexed-db.service.d.ts","sources":["ngx-indexed-db.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DBConfig, Key, ObjectStoreMeta, DBMode } from './ngx-indexed-db.meta';\nimport { Observable } from 'rxjs';\nexport declare class NgxIndexedDBService<T = any> {\n    private dbConfig;\n    private platformId;\n    private readonly isBrowser;\n    private indexedDB;\n    constructor(dbConfig: DBConfig, platformId: any);\n    /**\n     * Allows to crate a new object store ad-hoc\n     * @param storeName The name of the store to be created\n     * @param migrationFactory The migration factory if exists\n     */\n    createObjectStore(storeSchema: ObjectStoreMeta, migrationFactory?: () => {\n        [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void;\n    }): void;\n    /**\n     * Adds new entry in the store and returns its key\n     * @param storeName The name of the store to add the item\n     * @param value The entry to be added\n     * @param key The optional key for the entry\n     */\n    add(storeName: string, value: T, key?: any): Observable<number>;\n    /**\n     * Returns entry by key.\n     * @param storeName The name of the store to query\n     * @param key The entry key\n     */\n    getByKey(storeName: string, key: IDBValidKey): Observable<T>;\n    /**\n     * Returns entry by id.\n     * @param storeName The name of the store to query\n     * @param id The entry id\n     */\n    getByID(storeName: string, id: string | number): Observable<T>;\n    /**\n     * Returns entry by index.\n     * @param storeName The name of the store to query\n     * @param indexName The index name to filter\n     * @param key The entry key.\n     */\n    getByIndex(storeName: string, indexName: string, key: IDBValidKey): Observable<T>;\n    /**\n     * Return all elements from one store\n     * @param storeName The name of the store to select the items\n     */\n    getAll(storeName: string): Observable<T[]>;\n    /**\n     * Returns all items from the store after update.\n     * @param storeName The name of the store to update\n     * @param value The new value for the entry\n     * @param key The key of the entry to update if exists\n     */\n    update(storeName: string, value: T, key?: any): Observable<T[]>;\n    /**\n     * Returns all items from the store after delete.\n     * @param storeName The name of the store to have the entry deleted\n     * @param key The key of the entry to be deleted\n     */\n    delete(storeName: string, key: Key): Observable<T[]>;\n    /**\n     * Returns true if successfully delete all entries from the store.\n     * @param storeName The name of the store to have the entries deleted\n     */\n    clear(storeName: string): Observable<boolean>;\n    /**\n     * Returns true if successfully delete the DB.\n     */\n    deleteDatabase(): Observable<boolean>;\n    /**\n     * Returns the open cursor event\n     * @param storeName The name of the store to have the entries deleted\n     * @param keyRange The key range which the cursor should be open on\n     */\n    openCursor(storeName: string, keyRange?: IDBKeyRange): Observable<Event>;\n    /**\n     * Open a cursor by index filter.\n     * @param storeName The name of the store to query.\n     * @param indexName The index name to filter.\n     * @param keyRange The range value and criteria to apply on the index.\n     */\n    openCursorByIndex(storeName: string, indexName: string, keyRange: IDBKeyRange, mode?: DBMode): Observable<Event>;\n    /**\n     * Returns all items by an index.\n     * @param storeName The name of the store to query\n     * @param indexName The index name to filter\n     * @param keyRange  The range value and criteria to apply on the index.\n     */\n    getAllByIndex(storeName: string, indexName: string, keyRange: IDBKeyRange): Observable<T[]>;\n    /**\n     * Returns the number of rows in a store.\n     * @param storeName The name of the store to query\n     * @param keyRange  The range value and criteria to apply.\n     */\n    count(storeName: string, keyRange?: IDBValidKey | IDBKeyRange): Observable<number>;\n}\n"]}